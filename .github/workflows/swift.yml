name: Swift

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test :

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_13.1.app

    - name: Setup ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7.2
        bundler-cache: true
        
    - name: Install Pods
      run: |
        pod install

    - name: Build and test
      run: xcodebuild clean build test -workspace StoriesSDK.xcworkspace -scheme "StoriesSDK" -sdk iphonesimulator -destination "platform=iOS Simulator,name=iPhone 11" ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO
      
    - name: Install gpg
      run: brew install gnupg
      
    - name: Make executeable
      run: chmod +x ./.github/scripts/decrypt_secrets.sh
           chmod +x ./.github/scripts/archive_app.sh
           chmod +x ./.github/scripts/export_ipa.sh

    - name: Setup provisioning profile
      env:
        IOS_KEYS: ${{ secrets.IOS_KEYS }}
      run: ./.github/secrets/decrypt_secrets.sh

    - name: Archiving project
      env:
          PR_NUMBER: $(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
      run: ./.github/scripts/archive_app.sh

    - name: Exporting .ipa
      run: ./.github/scripts/export_ipa.sh

    # - name: Publishing app
    #   if: success()
    #   env:
    #       APPLEID_USERNAME: ${{ secrets.APPLEID_USERNAME }}
    #       APPLEID_PASSWORD: ${{ secrets.APPLEID_PASSWORD }}
    #   run: ./.github/scripts/publish_testflight.sh


#    - name: Install the Apple certificate and provisioning profile
#      env:
#          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
#          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
#          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
#          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#      run: |
#          # create variables
#          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#
#          # import certificate and provisioning profile from secrets
#          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
#          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
#
#          # create temporary keychain
#          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#
#          # import certificate to keychain
#          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#          security list-keychain -d user -s $KEYCHAIN_PATH
#
#          # apply provisioning profile
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
